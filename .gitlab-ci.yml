include:
  - template: Code-Quality.gitlab-ci.yml

stages:
  - build
  - test
  - deploy
  - build-workflow-viewer
  - publish

workflow:
  rules:
    - if: '$CI_COMMIT_REF_SLUG != "develop" && $CI_COMMIT_REF_SLUG != "master" && $CI_COMMIT_TAG == null && $CI_COMMIT_REF_SLUG !~ "release"'
      variables:
        APP_VERSION: "0.0.0-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"
        DOCKER_REGISTRY_TAG: "$CI_COMMIT_REF_SLUG"
    - if: '$CI_COMMIT_REF_SLUG == "develop"'
      variables:
        APP_VERSION: "$CI_COMMIT_REF_SLUG"
        DOCKER_REGISTRY_TAG: "$CI_COMMIT_REF_SLUG"
    - if: '$CI_COMMIT_TAG != null'
      variables:
        APP_VERSION: "$CI_COMMIT_TAG-$CI_COMMIT_SHORT_SHA"
        DOCKER_REGISTRY_TAG: "$CI_COMMIT_TAG-$CI_COMMIT_SHORT_SHA"  # at the job level

variables:
  KUBERNETES_POLL_TIMEOUT: 1800


.image-gitlab-development:
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$DOCKER_REGISTRY_TAG
    POETRY_VIRTUALENVS_CREATE: "false" # necessary to make poetry behave nicely
    KANIKO_CACHE_ARGS: "--cache=true --cache-copy-layers=true --cache-ttl=24h"
    GODEBUG: "http2client=0"
  tags:
    - "kubernetes"
    - "hetzner"

build-image-gitlab:
  extends: .image-gitlab-development
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [ "" ]
  stage: build
  only:
    - merge_requests
    - develop
    - tags
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}, \"$CI_DEPENDENCY_PROXY_SERVER\":{\"auth\":\"$(echo -n $CI_DEPENDENCY_PROXY_USER:$CI_DEPENDENCY_PROXY_PASSWORD | base64)\"}} }" > /kaniko/.docker/config.json
  script:
    - echo "${IMAGE_TAG}"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/docker/development/Dockerfile"
      --cache-repo "${CI_REGISTRY_IMAGE}/cache" ${KANIKO_CACHE_ARGS}
      --destination "${IMAGE_TAG}"


code_quality:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_TAG != null || $CI_COMMIT_BRANCH == 'develop' || $CI_COMMIT_BRANCH == 'support/*'
  artifacts:
    paths: [ gl-code-quality-report.json ]

unit-tests:
  extends: .image-gitlab-development
  image: $IMAGE_TAG
  only:
    - merge_requests
    - develop
    - tags
    - release.*
  stage: test
  script:
    - poetry install --no-interaction --no-ansi --with dev
    - poetry run pytest tests/
    - poetry run coverage report
    - poetry run coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml



vulnerabilities:
  extends: .image-gitlab-development
  image: $IMAGE_TAG
  only:
    - merge_requests
    - develop
  stage: test
  script:
    #- python purge_poetrylock_dev-dependencies.py  # TODO implement solution to only scan main dependencies
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v0.36.1/trivy_0.36.1_Linux-64bit.tar.gz -O - | tar -zxvf -
    - touch ./emptyTrivyignoreFile
    - echo 'CVE-2024-27318' >> ./emptyTrivyignoreFile
    - ./trivy --cache-dir .trivycache/ fs . | tee VULNERABILITY_REPORT.txt
    - ./trivy --skip-files "pool_seq_mapping_filtered.csv" --ignorefile ./emptyTrivyignoreFile --cache-dir .trivycache/ fs --exit-code 1 --severity HIGH .
  cache:
    paths:
      - .trivycache/
  artifacts:
    when: always
    paths:
      - VULNERABILITY_REPORT.txt
      -
gather-licences:
  extends: .image-gitlab-development
  image: $IMAGE_TAG
  only:
    - develop
    - tags
    - release.*
  stage: test
  before_script:
    - pip install pip-licenses
  script:
    - pip-licenses -f markdown --order=license --output-file LICENSES.md
  artifacts:
    when: always
    paths:
      - LICENSES.md

publish-package:
  extends: .image-gitlab-development
  image: $IMAGE_TAG
  stage: deploy
  only:
    - tags
  script:
    - poetry version $(git describe --tags --abbrev=0)
    - cat pyproject.toml
    - poetry config repositories.gitlab https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry config http-basic.gitlab gitlab-ci-token ${CI_JOB_TOKEN}
    - poetry build --format wheel # builds Cython
    - poetry publish -vvr gitlab